// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate typing and fetch function for server Generates crud example without an error that matches snapshot 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType } from \\"declarapi\\"

  /** test types for get method **/
export type testGetArgument = { search?: string | undefined; id?: string | string[] | undefined } | undefined
export type testGetReturns = { id: string; myNumber: number }[]

/** test types for post method **/
export type testPostArgument = { id?: string | undefined; myNumber: number }
export type testPostReturns = { id: string; myNumber: number }

/** test types for put method **/
export type testPutArgument = { id: string; myNumber: number }
export type testPutReturns = { id: string; myNumber: number }

/** test types for patch method **/
export type testPatchArgument = { id: string; myNumber?: number | undefined }
export type testPatchReturns = { id: string; myNumber: number }

/** test types for delete method **/
export type testDeleteArgument = { id: string | string[] }
export type testDeleteReturns = { id: string; myNumber: number }[]

  export type ContractListType = {
testGet: ContractType<testGetArgument, testGetReturns>
testPost: ContractType<testPostArgument, testPostReturns>
testPut: ContractType<testPutArgument, testPutReturns>
testPatch: ContractType<testPatchArgument, testPatchReturns>
testDelete: ContractType<testDeleteArgument, testDeleteReturns>
}

  export const contracts: ContractListType = {
testGet: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"get\\",
          handle: undefined,
          arguments: {\\"search\\":[\\"string\\",\\"?\\"],\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"},\\"?\\"]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}},
testPost: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"post\\",
          handle: undefined,
          arguments: {\\"id\\":[\\"string\\",\\"?\\"],\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPut: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"put\\",
          handle: undefined,
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPatch: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"patch\\",
          handle: undefined,
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":[\\"number\\",\\"?\\"]} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testDelete: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"delete\\",
          handle: undefined,
          arguments: {\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"}]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}}
}
"
`;

exports[`Generate typing and fetch function for server Generates single example without an error that matches snapshot 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType } from \\"declarapi\\"

  /** test types for get method **/
export type testGetArgument = { myNumber: number }
export type testGetReturns = {  } | undefined

  export type ContractListType = {
testGet: ContractType<testGetArgument, testGetReturns>
}

  export const contracts: ContractListType = {
testGet: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"get\\",
          handle: undefined,
          arguments: {\\"myNumber\\":\\"number\\"} ,
          returns: {}}
}
"
`;

exports[`Generate typing and fetch function for server generates elasticsearch implementation 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType, elastic } from \\"declarapi\\"

  /** test types for get method **/
export type testGetArgument = { search?: string | undefined; id?: string | string[] | undefined } | undefined
export type testGetReturns = { id: string; myNumber: number }[]

/** test types for post method **/
export type testPostArgument = { id?: string | undefined; myNumber: number }
export type testPostReturns = { id: string; myNumber: number }

/** test types for put method **/
export type testPutArgument = { id: string; myNumber: number }
export type testPutReturns = { id: string; myNumber: number }

/** test types for patch method **/
export type testPatchArgument = { id: string; myNumber?: number | undefined }
export type testPatchReturns = { id: string; myNumber: number }

/** test types for delete method **/
export type testDeleteArgument = { id: string | string[] }
export type testDeleteReturns = { id: string; myNumber: number }[]

  export type ContractListType = {
testGet: ContractType<testGetArgument, testGetReturns>
testPost: ContractType<testPostArgument, testPostReturns>
testPut: ContractType<testPutArgument, testPutReturns>
testPatch: ContractType<testPatchArgument, testPatchReturns>
testDelete: ContractType<testDeleteArgument, testDeleteReturns>
}

  export const contracts: ContractListType = {
testGet: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"get\\",
          handle: (input, auth, contract) => elastic.get(\\"test\\", contract, auth, input && input.id, input && input.search),
          arguments: {\\"search\\":[\\"string\\",\\"?\\"],\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"},\\"?\\"]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}},
testPost: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"post\\",
          handle: (input, auth, contract) => elastic.post(\\"test\\", contract, auth, input),
          arguments: {\\"id\\":[\\"string\\",\\"?\\"],\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPut: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"put\\",
          handle: (input, auth, contract) => elastic.put(\\"test\\", contract, auth, input, input.id),
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPatch: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"patch\\",
          handle: (input, auth, contract) => elastic.patch(\\"test\\", contract, auth, input, input.id),
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":[\\"number\\",\\"?\\"]} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testDelete: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"delete\\",
          handle: (input, auth, contract) => elastic.del(\\"test\\", contract, auth, input.id),
          arguments: {\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"}]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}}
}
"
`;

exports[`Generate typing and fetch function for server generates simple elasticsearch implementation, search defaults to idOnly get 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType, elastic } from \\"declarapi\\"

  /** test types for get method **/
export type testGetArgument = { myNumber: number }
export type testGetReturns = {  } | undefined

  export type ContractListType = {
testGet: ContractType<testGetArgument, testGetReturns>
}

  export const contracts: ContractListType = {
testGet: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"get\\",
          handle: (input, auth, contract) => elastic.get(\\"test\\", contract, auth, input && input.id),
          arguments: {\\"myNumber\\":\\"number\\"} ,
          returns: {}}
}
"
`;
