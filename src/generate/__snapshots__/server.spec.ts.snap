// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate typing and fetch function for server Generates crud example without an error that matches snapshot 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType } from \\"declarapi-runtime\\"

  /** test types for GET method **/
export type testGETArgument = { search?: string | undefined; id?: string | string[] | undefined } | undefined
export type testGETReturns = { id: string; myNumber: number }[]

/** test types for POST method **/
export type testPOSTArgument = { id?: string | undefined; myNumber: number }
export type testPOSTReturns = { id: string; myNumber: number }

/** test types for PUT method **/
export type testPUTArgument = { id: string; myNumber: number }
export type testPUTReturns = { id: string; myNumber: number }

/** test types for PATCH method **/
export type testPATCHArgument = { id: string; myNumber?: number | undefined }
export type testPATCHReturns = { id: string; myNumber: number }

/** test types for DELETE method **/
export type testDELETEArgument = { id: string | string[] }
export type testDELETEReturns = { id: string; myNumber: number }[]

  export type ContractListType = {
testGET: ContractType<testGETArgument, testGETReturns>
testPOST: ContractType<testPOSTArgument, testPOSTReturns>
testPUT: ContractType<testPUTArgument, testPUTReturns>
testPATCH: ContractType<testPATCHArgument, testPATCHReturns>
testDELETE: ContractType<testDELETEArgument, testDELETEReturns>
}

  export const contracts: ContractListType = {
testGET: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"GET\\",
          handle: undefined,
          arguments: {\\"search\\":[\\"string\\",\\"?\\"],\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"},\\"?\\"]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}},
testPOST: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"POST\\",
          handle: undefined,
          arguments: {\\"id\\":[\\"string\\",\\"?\\"],\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPUT: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"PUT\\",
          handle: undefined,
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPATCH: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"PATCH\\",
          handle: undefined,
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":[\\"number\\",\\"?\\"]} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testDELETE: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"DELETE\\",
          handle: undefined,
          arguments: {\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"}]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}}
}
"
`;

exports[`Generate typing and fetch function for server Generates single example without an error that matches snapshot 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType } from \\"declarapi-runtime\\"

  /** test types for GET method **/
export type testGETArgument = { myNumber: number }
export type testGETReturns = {  } | undefined

  export type ContractListType = {
testGET: ContractType<testGETArgument, testGETReturns>
}

  export const contracts: ContractListType = {
testGET: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"GET\\",
          handle: undefined,
          arguments: {\\"myNumber\\":\\"number\\"} ,
          returns: {}}
}
"
`;

exports[`Generate typing and fetch function for server generates elasticsearch implementation 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType, elastic } from \\"declarapi-runtime\\"

  /** test types for GET method **/
export type testGETArgument = { search?: string | undefined; id?: string | string[] | undefined } | undefined
export type testGETReturns = { id: string; myNumber: number }[]

/** test types for POST method **/
export type testPOSTArgument = { id?: string | undefined; myNumber: number }
export type testPOSTReturns = { id: string; myNumber: number }

/** test types for PUT method **/
export type testPUTArgument = { id: string; myNumber: number }
export type testPUTReturns = { id: string; myNumber: number }

/** test types for PATCH method **/
export type testPATCHArgument = { id: string; myNumber?: number | undefined }
export type testPATCHReturns = { id: string; myNumber: number }

/** test types for DELETE method **/
export type testDELETEArgument = { id: string | string[] }
export type testDELETEReturns = { id: string; myNumber: number }[]

  export type ContractListType = {
testGET: ContractType<testGETArgument, testGETReturns>
testPOST: ContractType<testPOSTArgument, testPOSTReturns>
testPUT: ContractType<testPUTArgument, testPUTReturns>
testPATCH: ContractType<testPATCHArgument, testPATCHReturns>
testDELETE: ContractType<testDELETEArgument, testDELETEReturns>
}

  export const contracts: ContractListType = {
testGET: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"GET\\",
          handle: (input, auth, contract) => elastic.get(\\"test\\", contract, auth, input && input.id, input && input.search),
          arguments: {\\"search\\":[\\"string\\",\\"?\\"],\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"},\\"?\\"]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}},
testPOST: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"POST\\",
          handle: (input, auth, contract) => elastic.post(\\"test\\", contract, auth, input),
          arguments: {\\"id\\":[\\"string\\",\\"?\\"],\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPUT: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"PUT\\",
          handle: (input, auth, contract) => elastic.put(\\"test\\", contract, auth, input, input.id),
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testPATCH: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"PATCH\\",
          handle: (input, auth, contract) => elastic.patch(\\"test\\", contract, auth, input, input.id),
          arguments: {\\"id\\":\\"string\\",\\"myNumber\\":[\\"number\\",\\"?\\"]} ,
          returns: {\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}},
testDELETE: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"DELETE\\",
          handle: (input, auth, contract) => elastic.del(\\"test\\", contract, auth, input.id),
          arguments: {\\"id\\":[\\"string\\",{\\"$array\\":\\"string\\"}]} ,
          returns: {\\"$array\\":{\\"id\\":\\"string\\",\\"myNumber\\":\\"number\\"}}}
}
"
`;

exports[`Generate typing and fetch function for server generates simple elasticsearch implementation, search defaults to idOnly get 1`] = `
"/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  import { ContractType, elastic } from \\"declarapi-runtime\\"

  /** test types for GET method **/
export type testGETArgument = { myNumber: number }
export type testGETReturns = {  } | undefined

  export type ContractListType = {
testGET: ContractType<testGETArgument, testGETReturns>
}

  export const contracts: ContractListType = {
testGET: {
          name: \\"test\\",
          manageFields: {},
          authentication: false,
          type: \\"GET\\",
          handle: (input, auth, contract) => elastic.get(\\"test\\", contract, auth, input && input.id),
          arguments: {\\"myNumber\\":\\"number\\"} ,
          returns: {}}
}
"
`;
