import { OutputSuccess } from '../transform/types'
import elastic, { ElasticInputType } from './elastic'
import { name, typeDef } from './common'
const contractType = `
import { Validation } from "yaschva"

export type ContractType<T, K> = {
  name: string
  authentication: boolean | string[] |
  {
    get: boolean | string[]
    modify: boolean | string[]
    delete?: boolean | string[]
  } |
  {
    get: boolean | string[]
    post: boolean | string[]
    put: boolean | string[]
    patch: boolean | string[]
    delete: boolean | string[]
  }
  type: "get" | "post" | "put" | "patch" | "delete"
  handle?: (input: T) => Promise<K>
  arguments: Validation
  returns: Validation
}`

export const server = (contracts: OutputSuccess[]): string => {
  const valueDef = contracts.map(x => {
    let handle = 'undefined'
    if (x.preferredImplementation && x.preferredImplementation.type === 'elasticsearch') {
      const elin:ElasticInputType = x.method === 'get'
        ? { idField: x.idFieldName, method: x.method, search: x.search || 'idOnly' }
        : { idField: x.idFieldName, method: x.method }

      handle = elastic(x.preferredImplementation, elin)
    }

    return `${name(x)}: {
          name: "${x.name}",
          authentication: ${JSON.stringify(x.authentication, undefined, 2)},
          type: "${x.method}",
          handle: ${handle},
          arguments: ${JSON.stringify(x.arguments)} ,
          returns: ${JSON.stringify(x.returns)}}`
  }).join(',\n')

  const contractTypeList = contracts.map(x =>
    `${name(x)}: ContractType<${name(x)}Argument, ${name(x)}Returns>`).join('\n')

  const impl = [
    ...new Set(contracts.map(x => {
      if (!x.preferredImplementation) return undefined
      if (x.method === 'put') return 'patch'
      if (x.method === 'delete') return 'del'
      return x.method
    }).filter(x => x))
  ].join(',')
  const elasticImport = `import { ${impl} } from "../../communication/Elastic"`
  const result =
  `/**********************************************
   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN
***********************************************/
  ${contractType}
  ${impl ? elasticImport : ''}

  ${typeDef(contracts)}
  export type ContractListType = {\n${contractTypeList}\n}\n
  export const contracts: ContractListType = {\n${valueDef}\n}\n`

  return result
}

export default server
