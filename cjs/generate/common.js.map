{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/generate/common.ts"],"names":[],"mappings":";;;AAAA,qCAA0C;AAG7B,QAAA,UAAU,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAClE,QAAA,IAAI,GAAG,CAAC,CAAgB,EAAU,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,kBAAU,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAA;AAEvE,QAAA,OAAO,GAAG,CAAC,SAA0B,EAAU,EAAE,CAC5D,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAChB,OAAO,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,MAAM;cACzB,YAAI,CAAC,CAAC,CAAC,cAAc,0BAAgB,CAAC,CAAC,CAAC,SAAS,CAAC;cAClD,YAAI,CAAC,CAAC,CAAC,aAAa,0BAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA","sourcesContent":["import { validationToType } from 'yaschva'\nimport { OutputSuccess } from '../transform/types.js'\n\nexport const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1)\nexport const name = (x: OutputSuccess): string => `${x.name}${capitalize(x.method)}`\n\nexport const typeDef = (contracts: OutputSuccess[]): string =>\n  contracts.map(x =>\n    `/** ${x.name} types for ${x.method} method **/\nexport type ${name(x)}Argument = ${validationToType(x.arguments)}\nexport type ${name(x)}Returns = ${validationToType(x.returns)}\\n`).join('\\n')\n"]}