{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/generate/client.ts"],"names":[],"mappings":";;;AACA,2CAA2C;AAG3C,MAAM,mBAAmB,GAAG,aAAa,CAAA;AACzC,MAAM,gBAAgB,GAAG,CAAC,KAAiB,EAAE,EAAE,CAC7C,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;IACnD,KAAK,KAAK,GAAG,CAAA;AAEhB,MAAM,WAAW,GAAG,CAAC,KAAiB,EAAE,EAAE,CACxC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAA;AAEjC,QAAA,MAAM,GAAG,CAAC,KAAsB,EAAE,YAAoB,EAAU,EAAE;IAC7E,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAC9B,MAAM,GAAG,GACP,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,+BAA+B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,GAAG,CAAA;QAC3F,MAAM,EAAE,GAAG;uCACwB,gBAAI,CAAC,CAAC,CAAC;;mBAE3B,GAAG;iBACL,CAAC,CAAC,MAAM;;cAEX,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,uBAAuB;;;;;qCAKnC,gBAAI,CAAC,CAAC,CAAC;mDACO,CAAA;QAE/C,OAAO,gBAAgB,gBAAI,CAAC,CAAC,CAAC;sBACZ,gBAAI,CAAC,CAAC,CAAC,WAAW,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;iBAE9D,gBAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAA;IAChD,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAEb,MAAM,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,gBAAI,CAAC,CAAC,CAAC;aAC1C,CAAC,CAAC,IAAI;sBACG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;aACvD,CAAC,CAAC,MAAM;iBACJ,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;eAC7B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAEpD,MAAM,WAAW,GAAG;;;;;;;0BAOI,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,mBAAmB;;;;;;;;;;;;;;;;sBAgBvC,mBAAmB;;MAEnC,mBAAO,CAAC,KAAK,CAAC;MACd,SAAS;gCACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,gBAAI,CAAC,CAAC,CAAC,KAAK,gBAAI,CAAC,CAAC,CAAC,EAAE,CAAC;GACrE,CAAA;IACD,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA;AAED,kBAAe,cAAM,CAAA","sourcesContent":["import { OutputSuccess } from '../transform/types.js'\nimport { typeDef, name } from './common.js'\nimport { Validation } from 'yaschva'\n\nconst getTokenDefaultPath = '../getToken'\nconst containsOptional = (input: Validation) =>\n  (Array.isArray(input) && input.some(y => y === '?')) ||\n   input === '?'\n\nconst allOptional = (input: Validation) =>\n  Object.values(input).every(containsOptional)\n\nexport const client = (input: OutputSuccess[], getTokenPath?:string): string => {\n  const functions = input.map(x => {\n    const url =\n      x.method === 'GET' ? `\\`/api/${x.name}?\\${serialize(input || {})}\\`` : `\"/api/${x.name}\"`\n    const fn = `\n    const valid = validate(contracts.${name(x)}.arguments, input);\n      if (valid.result === \"fail\") throw valid;\n    return fetch(${url}, {\n      method: \"${x.method}\",\n      headers: await defaultHeader(),\n      body: ${x.method === 'GET' ? 'undefined' : 'JSON.stringify(input)'},\n      signal\n    }).then(x=> x.json())\n    .then(x=> {\n      if(x.errorType){throw x}\n      const r = validate(contracts.${name(x)}.returns, x);\n      if(r.result ===\"fail\") throw r; return x})\\n`\n\n    return `export const ${name(x)} =\n      async (input: ${name(x)}Argument${allOptional(x.arguments) ? ' = {}' : ''},\n        signal: AbortSignal | undefined = undefined):\n       Promise<${name(x)}Returns> => {\\n${fn}};\\n`\n  }).join('\\n')\n\n  const contractDescription = input.map(x => `${name(x)}: {\n    name: \"${x.name}\",\n    authentication: ${JSON.stringify(x.authentication, undefined, 2)},\n    type: \"${x.method}\",\n    arguments: ${JSON.stringify(x.arguments)},\n    returns: ${JSON.stringify(x.returns)}}`).join(',')\n\n  const fileContent = `/* eslint-disable max-lines */\n/**********************************************\n  DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN\n***********************************************/\n\n  import { validate, Validation } from \"yaschva\";\n  import { deepFreeze, serialize } from \"microtil\";\n  import getToken from \"${getTokenPath ?? getTokenDefaultPath}\"\n  const defaultHeader = async () => {\n    const token = await getToken();\n    const headers =  {\n      'Authorization': \\`Bearer \\${token}\\`,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n\n    if(!token) delete headers.Authorization\n    return headers;\n  };\n\n    export const contracts: {[key:string]:{\n      name:string, type:string, authentication:any,\n      arguments: Validation, returns:Validation}} =\n        deepFreeze({${contractDescription}});\n\n    ${typeDef(input)}\n    ${functions}\n    export const functions = {${input.map(x => `${name(x)}: ${name(x)}`)}}\n  `\n  return fileContent\n}\n\nexport default client\n"]}