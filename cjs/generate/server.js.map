{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/generate/server.ts"],"names":[],"mappings":";;;;;;AACA,8DAA+D;AAC/D,2CAA2C;AAC3C,mCAAmC;AAEtB,QAAA,MAAM,GAAG,CAAC,SAA0B,EAAU,EAAE;IAC3D,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QACjC,IAAI,MAAM,GAAG,WAAW,CAAA;QACxB,IAAI,CAAC,CAAC,uBAAuB,IAAI,CAAC,CAAC,uBAAuB,CAAC,IAAI,KAAK,eAAe,EAAE;YACnF,MAAM,YAAY,GAAoB,CAAC,CAAC,MAAM,KAAK,KAAK;gBACtD,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,EAAE;gBACpD,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAA;YAExB,MAAM,GAAG,oBAAc,CAAC,CAAC,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAA;SACjE;aAAM,IAAI,CAAC,CAAC,uBAAuB,IAAI,CAAC,CAAC,uBAAuB,CAAC,IAAI,KAAK,WAAW,EAAE;YACtF,MAAM,YAAY,GAAoB,CAAC,CAAC,MAAM,KAAK,KAAK;gBACtD,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,EAAE;gBACpD,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAA;YAExB,MAAM,GAAG,iBAAS,CAAC,CAAC,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAA;SAC5D;QAED,OAAO,GAAG,gBAAI,CAAC,CAAC,CAAC;mBACF,CAAC,CAAC,IAAI;0BACC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;4BAC1C,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;mBACvD,CAAC,CAAC,MAAM;oBACP,MAAM;uBACH,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;qBAC7B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAA;IAC/C,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAEd,MAAM,gBAAgB,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CACzC,GAAG,gBAAI,CAAC,CAAC,CAAC,kBAAkB,gBAAI,CAAC,CAAC,CAAC,aAAa,gBAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAE/E,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAC,OAAA,OAAA,CAAC,CAAC,uBAAuB,0CAAE,IAAI,MAAK,eAAe,CAAA,EAAA,CAAC,CAAA;IAExF,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAC,OAAA,OAAA,CAAC,CAAC,uBAAuB,0CAAE,IAAI,MAAK,WAAW,CAAA,EAAA,CAAC,CAAA;IAE/E,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAA;IAChD,MAAM,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAA;IAEjC,MAAM,MAAM,GACZ;;;yBAGuB,aAAa,GAAG,QAAQ;;IAE7C,mBAAO,CAAC,SAAS,CAAC;sCACgB,gBAAgB;kDACJ,QAAQ,OAAO,CAAA;IAE/D,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,kBAAe,cAAM,CAAA","sourcesContent":["import { OutputSuccess } from '../transform/types.js'\nimport elasticCodeGen, { ElasticInputType } from './elastic.js'\nimport { name, typeDef } from './common.js'\nimport { kvCodeGen } from './kv.js'\n\nexport const server = (contracts: OutputSuccess[]): string => {\n  const valueDef = contracts.map(x => {\n    let handle = 'undefined'\n    if (x.preferredImplementation && x.preferredImplementation.type === 'elasticsearch') {\n      const codeGenInput:ElasticInputType = x.method === 'GET'\n        ? { method: x.method, search: x.search || 'idOnly' }\n        : { method: x.method }\n\n      handle = elasticCodeGen(x.preferredImplementation, codeGenInput)\n    } else if (x.preferredImplementation && x.preferredImplementation.type === 'key-value') {\n      const codeGenInput:ElasticInputType = x.method === 'GET'\n        ? { method: x.method, search: x.search || 'idOnly' }\n        : { method: x.method }\n\n      handle = kvCodeGen(x.preferredImplementation, codeGenInput)\n    }\n\n    return `${name(x)}: {\n          name: \"${x.name}\",\n          manageFields: ${JSON.stringify(x.manageFields, undefined, 2)},\n          authentication: ${JSON.stringify(x.authentication, undefined, 2)},\n          type: \"${x.method}\",\n          handle: ${handle},\n          arguments: ${JSON.stringify(x.arguments)} ,\n          returns: ${JSON.stringify(x.returns)}}`\n  }).join(',\\n')\n\n  const contractTypeList = contracts.map(x =>\n    `${name(x)}: ContractType<${name(x)}Argument, ${name(x)}Returns>`).join('\\n')\n\n  const elastic = contracts.find(x => x.preferredImplementation?.type === 'elasticsearch')\n\n  const kv = contracts.find(x => x.preferredImplementation?.type === 'key-value')\n\n  const elasticImport = elastic ? ', elastic' : ''\n  const kvImport = kv ? ', kv' : ''\n\n  const result =\n  `/**********************************************\n   DO NOT EDIT THIS FILE, IT WILL BE OVERRIDDEN\n***********************************************/\n  import { ContractType${elasticImport}${kvImport} } from \"declarapi-runtime\"\n\n  ${typeDef(contracts)}\n  export type ContractListType = {\\n${contractTypeList}\\n}\\n\n  export const contracts: ContractListType = {\\n${valueDef}\\n}\\n`\n\n  return result\n}\n\nexport default server\n"]}