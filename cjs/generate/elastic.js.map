{"version":3,"file":"elastic.js","sourceRoot":"","sources":["../../src/generate/elastic.ts"],"names":[],"mappings":";;;AAUa,QAAA,cAAc,GAAG,CAAC,MAAe,EAAE,KAAuB,EAAS,EAAE;IAChF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAA;IACxB,QAAQ,KAAK,CAAC,MAAM,EAAE;QACpB,KAAK,KAAK,CAAC,CAAC;YACV,IAAI,KAAK,CAAC,MAAM,KAAK,YAAY,EAAE;gBACjC,OAAO,2CAA2C,KAAK,8DAA8D,CAAA;aACtH;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,EAAE;gBACpC,OAAO,2CAA2C,KAAK,uCAAuC,CAAA;aAC/F;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;aACtD;YACD,MAAM,IAAI,KAAK,CAAC,gDAAgD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;SAChG;QACD,KAAK,MAAM,CAAC,CAAC,OAAO,4CAA4C,KAAK,2BAA2B,CAAA;QAChG,KAAK,OAAO,CAAC,CAAC,OAAO,6CAA6C,KAAK,qCAAqC,CAAA;QAC5G,KAAK,KAAK,CAAC,CAAC,OAAO,2CAA2C,KAAK,qCAAqC,CAAA;QACxG,KAAK,QAAQ,CAAC,CAAC,OAAO,2CAA2C,KAAK,8BAA8B,CAAA;KACrG;AACH,CAAC,CAAA;AAED,kBAAe,sBAAc,CAAA","sourcesContent":["import { Elastic } from '../DataDriverTypes.js'\nimport { SearchTypes, HttpMethods } from 'declarapi-runtime'\nexport type ElasticInputGet = {\n  method: 'GET',\n  search: SearchTypes\n}\nexport type ElasticInputBase = { method: HttpMethods, search? :SearchTypes}\nexport type ElasticInputType = ElasticInputBase & (ElasticInputGet | {\n  method: 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n})\nexport const elasticCodeGen = (driver: Elastic, input: ElasticInputType):string => {\n  const { index } = driver\n  switch (input.method) {\n    case 'GET': {\n      if (input.search === 'textSearch') {\n        return `(input, auth, contract) => elastic.get(\"${index}\", contract, auth, input && input.id, input && input.search)`\n      } else if (input.search === 'idOnly') {\n        return `(input, auth, contract) => elastic.get(\"${index}\", contract, auth, input && input.id)`\n      } else if (input.search === 'full') {\n        throw new Error('Parametric get not implemented yet')\n      }\n      throw new Error(`Unsupported automatic elasticsearch methods: ${JSON.stringify(input.search)}`)\n    }\n    case 'POST': return `(input, auth, contract) => elastic.post(\"${index}\", contract, auth, input)`\n    case 'PATCH': return `(input, auth, contract) => elastic.patch(\"${index}\", contract, auth, input, input.id)`\n    case 'PUT': return `(input, auth, contract) => elastic.put(\"${index}\", contract, auth, input, input.id)`\n    case 'DELETE': return `(input, auth, contract) => elastic.del(\"${index}\", contract, auth, input.id)`\n  }\n}\n\nexport default elasticCodeGen\n"]}