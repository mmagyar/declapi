{"version":3,"file":"single.js","sourceRoot":"","sources":["../../src/transform/single.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mDAA6D;AAE7D,wCAAyD;AAE5C,QAAA,SAAS,GAAG,CAAO,IAAmB,EAAmB,EAAE;IACtE,MAAM,KAAK,GAAG,MAAM,wBAAQ,CAAC,MAAM,kBAAQ,CAAC,GAAG,4BAAkB,2BAA2B,CAAC,EAAE,IAAI,CAAC,CAAA;IAEpG,IAAI,iCAAiB,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IAC1C,MAAM,YAAY,GAAa,IAAI,CAAA;IACnC,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,YAAY,CAAC,IAAI;QACtB,OAAO,EAAE;YACP;gBACE,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,cAAc,EAAE,YAAY,CAAC,cAAc;gBAC3C,YAAY,EAAE,EAAE;gBAChB,MAAM,EAAE,YAAY,CAAC,IAAI,IAAI,KAAK;gBAClC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB;SACF;KACF,CAAA;AACH,CAAC,CAAA,CAAA;AAED,kBAAe,iBAAS,CAAA","sourcesContent":["import { validate, isValidationError } from './jsonSchema.js'\nimport { Contract, Output } from './types.js'\nimport { loadJSON, baseSchemaLocation } from '../util.js'\n\nexport const transform = async (data:Contract | any): Promise<Output> => {\n  const valid = await validate(await loadJSON(`${baseSchemaLocation}singleContractSchema.json`), data)\n\n  if (isValidationError(valid)) return valid\n  const contractData: Contract = data\n  return {\n    type: 'result',\n    key: contractData.name,\n    results: [\n      {\n        name: contractData.name,\n        authentication: contractData.authentication,\n        manageFields: {},\n        method: contractData.type || 'GET',\n        arguments: data.arguments,\n        returns: data.returns\n      }\n    ]\n  }\n}\n\nexport default transform\n"]}