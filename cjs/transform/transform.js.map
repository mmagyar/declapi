{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../src/transform/transform.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAAsD;AACtD,2CAA0D;AAE7C,QAAA,SAAS,GAAG,CAAO,QAA0C,EAAmB,EAAE;IAC7F,MAAM,IAAI,GAAQ,QAAQ,CAAA;IAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;QAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,2DAA2D,EAAE,CAAA;KAAE;IAEpH,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,2BAA2B,CAAC,EAAE;QACtD,OAAO,qBAAe,CAAC,IAAI,CAAC,CAAA;KAC7B;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE;QAC3D,OAAO,mBAAa,CAAC,IAAI,CAAC,CAAA;KAC3B;IACD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,uCAAuC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAA;AACzF,CAAC,CAAA,CAAA;AAED,kBAAe,iBAAS,CAAA","sourcesContent":["import { Output, CrudContract, Contract } from './types.js'\nimport { transform as crudTransform } from './crud.js'\nimport { transform as singleTransform } from './single.js'\n\nexport const transform = async (contract: CrudContract | Contract | object): Promise<Output> => {\n  const data: any = contract\n  if (!data.$schema) { return { type: 'error', errors: \"Schema files must contain $schema that point to it's type\" } }\n\n  if (data.$schema.endsWith('singleContractSchema.json')) {\n    return singleTransform(data)\n  } else if (data.$schema.endsWith('crudContractSchema.json')) {\n    return crudTransform(data)\n  }\n  return { type: 'error', errors: `Unsupported schema for declaration: ${data.$schema}` }\n}\n\nexport default transform\n"]}