{"version":3,"file":"crud.spec.js","sourceRoot":"","sources":["../../src/transform/crud.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { transform } from './crud.js'\nimport { CrudContract, CrudAuthAll, CrudAuthSome, AuthType, Output } from './types.js'\ndescribe('transform crud', () => {\n  const getArgs = (result: Output, method:string) => {\n    const res = result.results?.find(x => x.method === method)?.arguments\n    if (!res) throw new Error(`Method not found ${method}`)\n    return res\n  }\n\n  const getReturns = (result: Output, method:string) => {\n    const res = result.results?.find(x => x.method === method)?.returns\n    if (!res) throw new Error(`Method not found ${method}`)\n    return res\n  }\n\n  it('id must be present on input', async () => {\n    const resultErr = await transform({ name: 'test', authentication: false, dataType: { notId: 'string' } })\n    expect(resultErr).toStrictEqual({\n      type: 'error',\n      errors: 'id field does not exist in the data declaration'\n    })\n\n    const result = await transform({\n      name: 'test',\n      authentication: false,\n      dataType: { id: 'string', notId: 'string' }\n    })\n    expect(result).toHaveProperty('type', 'result')\n    expect(result).toHaveProperty('results')\n    expect(result.results).toHaveLength(5)\n  })\n\n  it('does not generate arguments for get is search is not set', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      }\n    }\n\n    const output = await transform(input)\n    expect(output.results?.[0]?.arguments).toStrictEqual({})\n    expect(output.results?.[0]?.method).toBe('GET')\n    // expect(output).toMatchSnapshot()\n  })\n\n  it.skip('generates full, parametric search option', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: 'full'\n    }\n    expect(await transform(input)).toMatchSnapshot()\n  })\n\n  it('generates a full text search search option', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: 'textSearch'\n    }\n\n    const output = await transform(input)\n    expect(output.results?.[0]?.arguments).toStrictEqual({\n      id: ['string', { $array: 'string' }, '?'],\n      search: ['string', '?']\n    })\n    expect(output.results?.[0]?.method).toBe('GET')\n    // expect(output).toMatchSnapshot()\n  })\n\n  it.skip('generates an id only get', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: 'idOnly'\n    }\n\n    expect(await transform(input)).toMatchSnapshot()\n  })\n\n  it('does not generate methods that are disabled ver 1', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      methods: {\n        put: false,\n        patch: false\n      },\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: 'idOnly'\n    }\n\n    const result = await transform(input)\n    expect(result.results).toHaveLength(3)\n    expect(result.results?.find(x => x.method === 'PUT')).toBeUndefined()\n    expect(result.results?.find(x => x.method === 'PATCH')).toBeUndefined()\n    expect(result.results?.find(x => x.method === 'GET')).toBeTruthy()\n    expect(result.results?.find(x => x.method === 'POST')).toBeTruthy()\n    expect(result.results?.find(x => x.method === 'DELETE')).toBeTruthy()\n  })\n\n  it('does not generate methods that are disabled ver 2', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      methods: {\n        get: false,\n        post: false,\n        delete: false\n      },\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: 'idOnly'\n    }\n\n    const result = await transform(input)\n    expect(result.results).toHaveLength(2)\n    expect(result.results?.find(x => x.method === 'PUT')).toBeTruthy()\n    expect(result.results?.find(x => x.method === 'PATCH')).toBeTruthy()\n    expect(result.results?.find(x => x.method === 'GET')).toBeUndefined()\n    expect(result.results?.find(x => x.method === 'POST')).toBeUndefined()\n    expect(result.results?.find(x => x.method === 'DELETE')).toBeUndefined()\n  })\n\n  it('generates a custom arguments parameters for get ', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        myNumber: 'number',\n        myString: 'string'\n      },\n      search: { customSearchField: 'string' }\n    }\n    const result = await transform(input)\n    expect(result.results?.[0]?.arguments?.customSearchField).toEqual('string')\n    // expect(result).toMatchSnapshot()\n  })\n\n  it('accepts regex validated id', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: { $string: { regex: '[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}' } },\n        notAnId: 'boolean'\n      },\n      search: 'idOnly'\n    }\n    const output = await transform(input)\n    expect(output.results?.[0]?.arguments).toStrictEqual(\n      {\n        id: [\n          { $string: { regex: '[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}' } },\n          { $array: { $string: { regex: '[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}' } } },\n          '?'\n        ]\n      }\n    )\n    expect(output.results).toHaveLength(5)\n  })\n\n  it('returns an object with an error message on invalid id type', async () => {\n    const input:CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'number',\n        notAnId: 'boolean'\n      }\n    }\n    const result = await transform(input)\n    expect(result.errors).toEqual('Type of id field must be string')\n  })\n\n  it('returns an object with an error message on validation error', async () => {\n    const input: any = {\n      name: 'test',\n      authenticationz: false,\n      dataType: {\n        id: 'string',\n        notAnId: 'boolean'\n      }\n    }\n    const result = await transform(input)\n    expect(result.errors).toHaveLength(2)\n    expect(result.errors?.[0]).toStrictEqual({ dataPath: '', keyword: 'additionalProperties', message: 'should NOT have additional properties', params: { additionalProperty: 'authenticationz' }, schemaPath: '#/additionalProperties' })\n  })\n\n  it('makes all parameters optional for patch', async () => {\n    const input: CrudContract = {\n      name: 'test',\n      authentication: false,\n      dataType: {\n        id: 'string',\n        notAnId: ['boolean', '?'],\n        singleElementArrayType: ['string'],\n        obj: { a: 'string', b: 'number' },\n        obj2: { a: ['string', '?'], b: ['number', '?'] },\n        duoType: ['boolean', 'number']\n      }\n    }\n    const result = await transform(input)\n    expect(result.results?.find(x => x.method === 'PATCH')?.arguments).toStrictEqual({\n      id: 'string',\n      notAnId: ['boolean', '?'],\n      singleElementArrayType: ['string', '?'],\n      obj: [{ a: 'string', b: 'number' }, '?'],\n      obj2: [{ a: ['string', '?'], b: ['number', '?'] }, '?'],\n      duoType: ['boolean', 'number', '?']\n    })\n  })\n\n  it('supports different auth protocols', async () => {\n    const withAuth: (auth? : string[] | boolean | CrudAuthAll | CrudAuthSome) => CrudContract =\n     (auth: string[] | boolean | CrudAuthAll | CrudAuthSome = true) => ({\n       name: 'test',\n       authentication: auth,\n       dataType: {\n         id: 'string',\n         notAnId: 'boolean'\n       }\n     })\n\n    expect((await transform(withAuth(false))).results?.every(x => x.authentication === false)).toBeTruthy()\n    expect((await transform(withAuth(true))).results?.every(x => x.authentication === true)).toBeTruthy()\n\n    const stringAllRole = (await transform(withAuth(['aUserRole']))).results || []\n    expect(stringAllRole).toHaveLength(5)\n    stringAllRole.forEach(x => expect(x.authentication).toStrictEqual(['aUserRole']))\n\n    const resultAuthSome = await transform(withAuth({ get: false, modify: ['admin'] }))\n    expect(resultAuthSome.results?.find(x => x.method === 'GET')?.authentication).toStrictEqual(false)\n    const authSomeOtherMethods = resultAuthSome.results?.filter(x => x.method !== 'GET') || []\n    expect(authSomeOtherMethods).toHaveLength(4)\n    authSomeOtherMethods.forEach(x => expect(x.authentication).toStrictEqual(['admin']))\n\n    const resultAuth = await transform(withAuth({ get: false, post: true, put: ['owner'], delete: ['admin'] }))\n    expect(resultAuth.results?.find(x => x.method === 'GET')?.authentication).toStrictEqual(false)\n    expect(resultAuth.results?.find(x => x.method === 'POST')?.authentication).toStrictEqual(true)\n    expect(resultAuth.results?.find(x => x.method === 'PUT')?.authentication).toStrictEqual(['owner'])\n    expect(resultAuth.results?.find(x => x.method === 'DELETE')?.authentication).toStrictEqual(['admin'])\n  })\n\n  it('does not required user to post when user auth is set globally', async () => {\n    const auth = ['admin', { createdBy: true }]\n    const withAuth: (auth? : AuthType | CrudAuthAll | CrudAuthSome) => CrudContract =\n     (auth: AuthType | CrudAuthAll | CrudAuthSome = true) => ({\n       name: 'test',\n       authentication: auth,\n       dataType: {\n         id: 'string',\n         notAnId: 'boolean',\n         createdBy: 'string'\n       }\n     })\n\n    const stringAllRole = (await transform(withAuth(['aUserRole']))).results || []\n    expect(stringAllRole).toHaveLength(5)\n    stringAllRole.forEach(x => expect(x.authentication).toStrictEqual(['aUserRole']))\n\n    const boolAll = (await transform(withAuth(true))).results || []\n    expect(boolAll).toHaveLength(5)\n    boolAll.forEach(x => expect(x.authentication).toStrictEqual(true))\n\n    const resultAuth = await transform(withAuth(auth))\n    expect(resultAuth.results?.find(x => x.method === 'GET')?.authentication).toStrictEqual(auth)\n    expect(resultAuth.results?.find(x => x.method === 'POST')?.authentication).toStrictEqual(true)\n    expect(resultAuth.results?.find(x => x.method === 'PUT')?.authentication).toStrictEqual(auth)\n    expect(resultAuth.results?.find(x => x.method === 'DELETE')?.authentication).toStrictEqual(auth)\n  })\n\n  describe('manageFields', () => {\n    const schema = () => ({\n      name: 'test',\n      authentication: false,\n      manageFields: { createdBy: true },\n      dataType: {\n        id: 'string',\n        notAnId: 'boolean'\n      }\n    })\n    it('returns error when manageFields createdBy is set to true, but the field is missing', async () => {\n      const result = await transform(schema())\n\n      expect(result).toHaveProperty('type', 'error')\n      expect(result).toHaveProperty('errors', 'managed field \"createdBy\" is not present on data type')\n    })\n\n    it('returns error when manageFields createdBy is set to true, but field is not declared as string', async () => {\n      const input:any = schema()\n      input.dataType.createdBy = 'number'\n      const result = await transform(input)\n\n      expect(result).toHaveProperty('type', 'error')\n      expect(result).toHaveProperty('errors', 'managed field \"createdBy\" must be a string, current type :number')\n    })\n    it('does not generate error when createdBy managedField is a string', async () => {\n      const input:any = schema()\n      input.dataType.createdBy = 'string'\n\n      expect(await transform(input)).toHaveProperty('type', 'result')\n\n      input.dataType.createdBy = { $string: {} }\n      expect(await transform(input)).toHaveProperty('type', 'result')\n    })\n\n    it('does not generate error when createdBy managedField is disabled', async () => {\n      const input:any = schema()\n      input.manageFields.createdBy = false\n      input.dataType.createdBy = 'number'\n\n      expect(await transform(input)).toHaveProperty('type', 'result')\n    })\n\n    it('removes managed field from post arguments', async () => {\n      const input:any = schema()\n      input.dataType.createdBy = 'string'\n\n      const result = await transform(input)\n      expect(result).toHaveProperty('type', 'result')\n\n      expect(getReturns(result, 'GET').$array).toHaveProperty('createdBy', 'string')\n\n      expect(getArgs(result, 'POST')).not.toHaveProperty('createdBy')\n      expect(getReturns(result, 'POST')).toHaveProperty('createdBy', 'string')\n\n      expect(getArgs(result, 'PUT')).not.toHaveProperty('createdBy')\n      expect(getReturns(result, 'PUT')).toHaveProperty('createdBy', 'string')\n\n      expect(getArgs(result, 'PATCH')).not.toHaveProperty('createdBy')\n      expect(getReturns(result, 'PATCH')).toHaveProperty('createdBy', 'string')\n\n      expect(getArgs(result, 'DELETE')).not.toHaveProperty('createdBy')\n      expect(getReturns(result, 'DELETE').$array).toHaveProperty('createdBy', 'string')\n    })\n  })\n})\n"]}