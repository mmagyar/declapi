{"version":3,"file":"crud.js","sourceRoot":"","sources":["../../src/transform/crud.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAA8B;AAC9B,mDAA6D;AAQ7D,wCAAyD;AAEzD,MAAM,eAAe,GAAG,CAAC,KAA8B,EAAe,EAAE;IACtE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;YAAE,OAAO,KAAK,CAAA;SAAE;QAEhD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;KAC3B;IACD,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AACrB,CAAC,CAAA;AAED,MAAM,YAAY,GAChB,CAAC,MAA4B,EAAE,QAAoB,EAAE,MAAoB,EAAc,EAAE;IACvF,IAAI,MAAM,KAAK,QAAQ,EAAE;QACvB,OAAO,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,CAAA;KACjD;SAAM,IAAI,MAAM,KAAK,YAAY,EAAE;QAClC,OAAO,EAAE,MAAM,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,CAAA;KAC1E;SAAM,IAAI,MAAM,KAAK,MAAM,EAAE;QAC5B,OAAO,cAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAA;KACtD;SAAM,IAAI,CAAC,MAAM,EAAE;QAClB,OAAO,EAAE,CAAA;KACV;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAEH,MAAM,YAAY,GAAG,CAAC,QAAqB,EAAkB,EAAE;IAC7D,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QACtC,OAAO;YACL,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,iDAAiD;SAC1D,CAAA;KACF;IAED,MAAM,MAAM,GAAQ,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAA;IACxC,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;QAC5C,OAAO;YACL,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,iCAAiC;SAC1C,CAAA;KACF;IAED,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AACD,MAAM,iBAAiB,GAAG,CAAC,QAAsB,EAAgB,EAAE;IACjE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,IAAI,EAAE,CAAC,EAAE;QACtE,IAAI,KAAK,EAAE;YACT,MAAM,SAAS,GAAQ,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;YAC7C,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,OAAO;oBACL,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,kBAAkB,GAAG,+BAA+B;iBAC7D,CAAA;aACF;YAED,IAAI,CAAC,CAAC,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;gBAClD,OAAO;oBACL,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,kBAAkB,GAAG,qCAAqC,SAAS,EAAE;iBAC9E,CAAA;aACF;SACF;KACF;IAED,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED,MAAM,aAAa,GAAG,CAAC,IAAgB,EAAE,YAA+B,EAAa,EAAE;IACrF,MAAM,MAAM,qBAAQ,IAAI,CAAE,CAAA;IAC1B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC,EAAE;QAC7D,IAAI,KAAK,EAAE;YACT,OAAO,MAAM,CAAC,GAAG,CAAC,CAAA;SACnB;KACF;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AACD,MAAM,UAAU,GAAG,CAAC,GAAQ,EAAsB,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS,CAAA;AAC3E,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAuB,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,SAAS,CAAA;AAClF,MAAM,gBAAgB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAA;AACvF,QAAA,SAAS,GAAG,CAAO,IAAuB,EAAmB,EAAE;;IAC1E,MAAM,KAAK,GAAG,MAAM,wBAAQ,CAAC,MAAM,kBAAQ,CAAC,GAAG,4BAAkB,yBAAyB,CAAC,EAAE,IAAI,CAAC,CAAA;IAElG,IAAI,iCAAiB,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IAE1C,MAAM,YAAY,GAAiB,IAAI,CAAA;IAEvC,MAAM,EAAE,GAAG,YAAY,CAAC,cAAc,CAAA;IAEtC,MAAM,IAAI,GAAG;QACX,GAAG,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACjE,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACxF,GAAG,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QACpE,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QACtE,MAAM,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;KACxF,CAAA;IAED,MAAM,YAAY,GAAG,CAAC,MAAmB,EAAE,IAAgB,EACzD,UAAsB,YAAY,CAAC,QAAQ,EAAiB,EAAE,CAAC,CAAC;QAChE,MAAM;QACN,IAAI,EAAE,YAAY,CAAC,IAAI;QACvB,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC;QAC5B,YAAY,EAAE,YAAY,CAAC,YAAY,IAAI,EAAE;QAC7C,MAAM,EAAE,YAAY,CAAC,MAAM;QAC3B,uBAAuB,EAAE,YAAY,CAAC,uBAAuB;QAC7D,SAAS,EAAE,IAAI;QACf,OAAO;KACR,CAAC,CAAA;IAEF,MAAM,WAAW,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,QAAQ,EAAE,CAAA;IACrD,MAAM,MAAM,GAAoB,EAAE,CAAA;IAElC,MAAM,WAAW,GAAG,YAAY,CAAC,YAAY,CAAC,CAAA;IAC9C,IAAI,WAAW;QAAE,OAAO,WAAW,CAAA;IAEnC,MAAM,qBAAqB,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAA;IAC7D,IAAI,qBAAqB;QAAE,OAAO,qBAAqB,CAAA;IAEvD,MAAM,MAAM,GAAQ,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAA;IAC5C,IAAI,OAAA,YAAY,CAAC,OAAO,0CAAE,GAAG,MAAK,KAAK,EAAE;QACvC,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAA;QAClC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAC5B,YAAY,CAAC,MAAM,EAAE,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAA;KACrE;IAED,IAAI,OAAA,YAAY,CAAC,OAAO,0CAAE,IAAI,MAAK,KAAK,EAAE;QACxC,MAAM,IAAI,mCAAQ,YAAY,CAAC,QAAQ,KAAE,EAAE,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,GAAE,CAAA;QAC5D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,IAAI,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;KAClF;IAED,IAAI,OAAA,YAAY,CAAC,OAAO,0CAAE,GAAG,MAAK,KAAK,EAAE;QACvC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;KAClG;IAED,IAAI,OAAA,YAAY,CAAC,OAAO,0CAAE,KAAK,MAAK,KAAK,EAAE;QACzC,MAAM,KAAK,mCACN,cAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,eAAe,CAAC,KAAE,EAAE,EAAE,MAAM,GAAE,CAAA;QAC9D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;KACpF;IAED,IAAI,OAAA,YAAY,CAAC,OAAO,0CAAE,MAAM,MAAK,KAAK,EAAE;QAC1C,MAAM,SAAS,GAAgC,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,CAAA;QACnF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,CAAA;KAC5D;IAED,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAA;AACpE,CAAC,CAAA,CAAA;AAED,kBAAe,iBAAS,CAAA","sourcesContent":["import { ValueType, ObjectType, StringType } from 'yaschva'\nimport { map } from 'microtil'\nimport { validate, isValidationError } from './jsonSchema.js'\nimport {\n  CrudContract, CrudAuthAll, CrudAuthSome, OutputSuccess, Output, ManageableFields\n} from './types.js'\nimport {\n  HttpMethods,\n  SearchTypes\n} from 'declarapi-runtime'\nimport { loadJSON, baseSchemaLocation } from '../util.js'\n\nconst contractOptions = (input: ValueType | ValueType[]): ValueType[] => {\n  if (Array.isArray(input)) {\n    if (input.some(x => x === '?')) { return input }\n\n    return input.concat(['?'])\n  }\n  return [input, '?']\n}\n\nconst searchToType =\n  (idType: 'string'| StringType, dataType: ObjectType, search?: SearchTypes): ObjectType => {\n    if (search === 'idOnly') {\n      return { id: [idType, { $array: idType }, '?'] }\n    } else if (search === 'textSearch') {\n      return { search: ['string', '?'], id: [idType, { $array: idType }, '?'] }\n    } else if (search === 'full') {\n      return map(dataType, value => contractOptions(value))\n    } else if (!search) {\n      return {}\n    }\n\n    return search\n  }\n\nconst checkIdField = (contract:CrudContract) :Output | false => {\n  if (contract.dataType.id === undefined) {\n    return {\n      type: 'error',\n      errors: 'id field does not exist in the data declaration'\n    }\n  }\n\n  const idType: any = contract.dataType.id\n  if (!(idType === 'string' || idType.$string)) {\n    return {\n      type: 'error',\n      errors: 'Type of id field must be string'\n    }\n  }\n\n  return false\n}\nconst checkManageFields = (contract: CrudContract): Output|false => {\n  for (const [key, value] of Object.entries(contract.manageFields || {})) {\n    if (value) {\n      const fieldType: any = contract.dataType[key]\n      if (fieldType === undefined) {\n        return {\n          type: 'error',\n          errors: `managed field \"${key}\" is not present on data type`\n        }\n      }\n\n      if (!(fieldType === 'string' || fieldType.$string)) {\n        return {\n          type: 'error',\n          errors: `managed field \"${key}\" must be a string, current type :${fieldType}`\n        }\n      }\n    }\n  }\n\n  return false\n}\n\nconst removeManaged = (args: ObjectType, manageFields?: ManageableFields):ObjectType => {\n  const result = { ...args }\n  for (const [key, value] of Object.entries(manageFields || {})) {\n    if (value) {\n      delete result[key]\n    }\n  }\n\n  return result\n}\nconst isCrudAuth = (tbd: any): tbd is CrudAuthAll => tbd.post !== undefined\nconst isCrudAuthSome = (tbd: any): tbd is CrudAuthSome => tbd.modify !== undefined\nconst transformForPost = (tbd: any) => Array.isArray(tbd) && tbd.find(x => x.createdBy) ? true : tbd\nexport const transform = async (data:CrudContract | any): Promise<Output> => {\n  const valid = await validate(await loadJSON(`${baseSchemaLocation}crudContractSchema.json`), data)\n\n  if (isValidationError(valid)) return valid\n\n  const contractData: CrudContract = data\n\n  const au = contractData.authentication\n\n  const auth = {\n    GET: isCrudAuth(au) ? au.get : (isCrudAuthSome(au) ? au.get : au),\n    POST: isCrudAuth(au) ? au.post : transformForPost((isCrudAuthSome(au) ? au.modify : au)),\n    PUT: isCrudAuth(au) ? au.put : (isCrudAuthSome(au) ? au.modify : au),\n    PATCH: isCrudAuth(au) ? au.put : (isCrudAuthSome(au) ? au.modify : au),\n    DELETE: isCrudAuth(au) ? au.delete : (isCrudAuthSome(au) ? au.delete || au.modify : au)\n  }\n\n  const createOutput = (method: HttpMethods, args: ObjectType,\n    returns: ObjectType = contractData.dataType): OutputSuccess => ({\n    method,\n    name: contractData.name,\n    authentication: auth[method],\n    manageFields: contractData.manageFields || {},\n    search: contractData.search,\n    preferredImplementation: contractData.preferredImplementation,\n    arguments: args,\n    returns\n  })\n\n  const returnArray = { $array: contractData.dataType }\n  const output: OutputSuccess[] = []\n\n  const errorWithId = checkIdField(contractData)\n  if (errorWithId) return errorWithId\n\n  const errorWithManageFields = checkManageFields(contractData)\n  if (errorWithManageFields) return errorWithManageFields\n\n  const idType: any = contractData.dataType.id\n  if (contractData.methods?.get !== false) {\n    const search = contractData.search\n    output.push(createOutput('GET',\n      searchToType(idType, contractData.dataType, search), returnArray))\n  }\n\n  if (contractData.methods?.post !== false) {\n    const post = { ...contractData.dataType, id: [idType, '?'] }\n    output.push(createOutput('POST', removeManaged(post, contractData.manageFields)))\n  }\n\n  if (contractData.methods?.put !== false) {\n    output.push(createOutput('PUT', removeManaged(contractData.dataType, contractData.manageFields)))\n  }\n\n  if (contractData.methods?.patch !== false) {\n    const patch: {[s: string]: ValueType | ValueType[];} =\n    { ...map(contractData.dataType, contractOptions), id: idType }\n    output.push(createOutput('PATCH', removeManaged(patch, contractData.manageFields)))\n  }\n\n  if (contractData.methods?.delete !== false) {\n    const deleteIds: {[s: string]: ValueType[];} = { id: [idType, { $array: idType }] }\n    output.push(createOutput('DELETE', deleteIds, returnArray))\n  }\n\n  return { type: 'result', key: contractData.name, results: output }\n}\n\nexport default transform\n"]}