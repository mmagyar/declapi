{"version":3,"file":"transform.spec.js","sourceRoot":"","sources":["../../src/transform/transform.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { transform } from './transform.js'\n\ndescribe('Generator', () => {\n  it('generates basic example without error', async () => {\n    const result = await transform(require('../../example/single_example.json'))\n    expect(result.errors).toBeUndefined()\n    expect(result).toHaveProperty('type', 'result')\n  })\n\n  it('generates for object single contract input', async () => {\n    const input = {\n      $schema: '../../schema/singleContractSchema.json',\n      name: 'test',\n      authentication: false,\n      arguments: { myNumber: 'number' },\n      returns: {}\n    }\n\n    const result: any = await transform(input)\n    expect(result.errors).toBeUndefined()\n    expect(result).toStrictEqual({\n      type: 'result',\n      key: 'test',\n      results: [\n        {\n          name: 'test',\n          authentication: false,\n          manageFields: {},\n          method: 'GET',\n          arguments: {\n            myNumber: 'number'\n          },\n          returns: {}\n        }\n      ]\n    })\n  })\n\n  it('generates for object crud contract input', async () => {\n    const input = {\n      $schema: './schema/crudContractSchema.json',\n      name: 'test',\n      authentication: false,\n      dataType: { id: 'string', myNumber: 'number' }\n    }\n\n    const result: any = await transform(input)\n\n    expect(result.errors).toBeUndefined()\n    expect(result).toHaveProperty('type', 'result')\n    expect(result.results).toHaveLength(5)\n  })\n\n  it('rejects unknown $schema', async () => {\n    const input = {\n      $schema: './random.json',\n      name: 'test',\n      authentication: false,\n      arguments: { myNumber: 'number' },\n      returns: {}\n    }\n\n    const result: any = await transform(input)\n    expect(result.errors).toEqual('Unsupported schema for declaration: ./random.json')\n  })\n\n  it('rejects missing $schema', async () => {\n    const input = {\n      name: 'test',\n      authentication: false,\n      arguments: { myNumber: 'number' },\n      returns: {}\n    }\n\n    const result: any = await transform(input)\n    expect(result.errors).toEqual(\"Schema files must contain $schema that point to it's type\")\n  })\n\n  it('rejects invalid type', async () => {\n    const input = {\n      $schema: './schema/singleContractSchema.json',\n      name: 'test',\n      authentication: false,\n      arguments: { myNumber: 'number', invalidProp: 'imaginaryType' },\n      returns: {}\n    }\n\n    const result: any = await transform(input)\n    expect(result.errors).toHaveLength(14)\n\n    expect(result.errors[0]).toEqual({\n      dataPath: \".arguments['invalidProp']\",\n      keyword: 'type',\n      message: 'should be object',\n      params: { type: 'object' },\n      schemaPath: '#/type'\n    })\n  })\n})\n"]}