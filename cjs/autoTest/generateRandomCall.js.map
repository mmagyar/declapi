{"version":3,"file":"generateRandomCall.js","sourceRoot":"","sources":["../../src/autoTest/generateRandomCall.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,qCAAkC;AAGrB,QAAA,kBAAkB,GAC9B,CAAsB,MAAiB,EAAE,QAA+B,EAAE,IAAe,EACxC,EAAE;IACjD,MAAM,SAAS,GAAG,kBAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAC9C,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;IACxD,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,GAAG,GAAG,EAAE;QAClC,MAAM,KAAK,GAAO,IAAI,KAAK,CAAC,+CAA+C,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;QACjI,KAAK,CAAC,IAAI,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA;QAC1B,KAAK,CAAC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;QAClC,MAAM,KAAK,CAAA;KACZ;IACD,OAAO;QACL,MAAM,EAAE,OAAO,CAAC,QAAQ;QACxB,cAAc,EAAE,SAAS;KAC1B,CAAA;AACH,CAAC,CAAA,CAAA","sourcesContent":["import { AuthInput, ContractType } from 'declarapi-runtime'\nimport { generate } from 'yaschva'\nimport { HandleType } from 'declarapi-runtime/registerRestMethods.js'\n\nexport const generateRandomCall =\n async <Input, Output>(handle:HandleType, contract:ContractType<any, any>, auth: AuthInput):\n  Promise<{output: Output, generatedInput:Input}> => {\n   const generated = generate(contract.arguments)\n   const handled = await handle(generated, undefined, auth)\n   if (!handled || handled.code > 299) {\n     const error:any = new Error(`Random data generation returned with error: ${handled?.code}, ${JSON.stringify(handled?.response)}`)\n     error.code = handled?.code\n     error.response = handled?.response\n     throw error\n   }\n   return {\n     output: handled.response,\n     generatedInput: generated\n   }\n }\n"]}