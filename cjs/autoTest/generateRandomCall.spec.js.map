{"version":3,"file":"generateRandomCall.spec.js","sourceRoot":"","sources":["../../src/autoTest/generateRandomCall.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateRandomCall } from './generateRandomCall.js'\nimport { } from 'declarapi-runtime'\nimport { validate } from 'yaschva'\nimport { Expressable } from 'declarapi-runtime/registerRestMethods.js'\ndescribe('generateRandomCall', () => {\n  const auth = { }\n  const input = ():Expressable => ({\n    method: 'POST',\n    route: '/',\n    handle: jest.fn(),\n    handler: jest.fn(),\n    contract: {\n      name: 'test',\n      type: 'POST',\n      authentication: false,\n      manageFields: {},\n      arguments: {\n        myString: 'string',\n        myNumber: 'number',\n        myRegex: { $string: { regex: '\\\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}\\\\b' } }\n      },\n      returns: {}\n    }\n  })\n  it('will fail if handle is missing', async () => {\n    expect.assertions(1)\n    const data = input()\n    await generateRandomCall(data.handle, data.contract, auth).catch(x => {\n      expect(x).toHaveProperty('message', 'Random data generation returned with error: undefined, undefined')\n    })\n  })\n\n  it('calls handle with randomly generated, arguments that conform to the schema', async () => {\n    expect.assertions(7)\n\n    const data:any = input()\n    let handlerData:any\n    data.handle = jest.fn((input) => {\n      expect(typeof input.myNumber).toBe('number')\n      expect(typeof input.myString).toBe('string')\n      expect(Object.keys(input)).toHaveLength(3)\n      handlerData = input\n      return { response: 'done', code: 200 }\n    })\n    const result = await generateRandomCall(data.handle, data.contract, auth)\n    expect(result.output).toBe('done')\n    expect(result.generatedInput).toStrictEqual(handlerData)\n    expect(data.handle).toBeCalledTimes(1)\n    expect(validate(data.contract.arguments, result.generatedInput)).toHaveProperty('result', 'pass')\n  })\n\n  it('handle can return falsy value', async () => {\n    expect.assertions(1)\n    const data:any = input()\n    data.handle = jest.fn(() => false)\n    await generateRandomCall(data.handle, data.contract, auth).catch(x => {\n      expect(x).toHaveProperty('message', 'Random data generation returned with error: undefined, undefined')\n    })\n  })\n\n  it('handle can return error code', async () => {\n    expect.assertions(1)\n    const data:any = input()\n    data.handle = jest.fn(() => ({ code: 401 }))\n    await generateRandomCall(data.handle, data.contract, auth).catch(x => {\n      expect(x).toHaveProperty('message', 'Random data generation returned with error: 401, undefined')\n    })\n  })\n})\n"]}