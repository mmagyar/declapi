{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../src/bin/generate.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,0DAA2B;AAC3B,4CAAmB;AACnB,gDAAuB;AACvB,6EAAiD;AACjD,sEAA0C;AAC1C,sEAA0C;AAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,mBAAG,CAAA;AACvB,MAAM,OAAO,GAAG,YAAE,CAAC,YAAY,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAA;AAE5C,QAAA,QAAQ,GAAG,CAAO,KAAgC,EAAE,MAAa,EAAE,SAAiB,EAAE,EAAE;IACnG,MAAM,GAAG,GAAG,MAAM,sBAAS,CAAC,MAAM,CAAC,CAAA;IACnC,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE;QACxB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAC3C,MAAM,GAAG,CAAC,MAAM,CAAA;KACjB;IAED,OAAO;QACL,MAAM,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,mBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC/E,MAAM,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,mBAAM,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;KAC3F,CAAA;AACH,CAAC,CAAA,CAAA;AACD,MAAM,QAAQ,GAAG,CAAO,KAAY,EAAE,EAAE;IACtC,MAAM,QAAQ,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAClD,MAAM,QAAQ,GAAG,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAA;IAC1C,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,EAAE,CAAA;AAC/F,CAAC,CAAA,CAAA;AAEY,QAAA,SAAS,GAAG,CAAO,KAG/B,EAAE,cAAsB,EAAE,SAAiB,EAAE,EAAE;IAC9C,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QAC7B,MAAM,YAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;KACnC;IACD,MAAM,OAAO,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAErD,IAAI,CAAC,CAAC,MAAM,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;QACtD,MAAM,IAAI,KAAK,CAAC,gBAAgB,SAAS,uBAAuB,CAAC,CAAA;KAClE;IAED,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,cAAc,YAAY,CAAC,CAAA;QACvE,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAA;KAC/E;IAED,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,cAAc,YAAY,CAAC,CAAA;QACvE,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAA;KAC/E;AACH,CAAC,CAAA,CAAA;AACY,QAAA,UAAU,GAAG,CAAO,KAAY,EAAE,MAAa,EAAE,QAAkC,KAAK,EAAE,SAAkB,EAAE,EAAE;IAC3H,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAA;IACvC,MAAM,GAAG,GAAG,MAAM,gBAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;IAE5D,MAAM,CAAC,iBAAS,CAAC,GAAG,EAAE,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAA;AACpD,CAAC,CAAA,CAAA;AAED,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAA;AAC7B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAA;AAC5C,OAAO,CAAC,MAAM,CAAC,iCAAiC,EAAE,uDAAuD,EAAE,KAAK,CAAC,CAAA;AACjH,OAAO,CAAC,SAAS,CAAC,4CAA4C,CAAC,CAAA;AAC/D,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,YAAY,EAAE,eAAe,EAAE,EAAE;IAC7D,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE;QACzD,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;KACxE;IACD,kBAAU,CAAC,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC,KAAK,EAAE,eAAe,IAAI,SAAS,CAAC;SAChF,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC3B,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAA;AACvD,CAAC,CAAC,CAAA;AAEF,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA","sourcesContent":["#!/usr/bin/env node\nimport pkg from 'commander'\nimport fs from 'fs'\nimport path from 'path'\nimport transform from '../transform/transform.js'\nimport server from '../generate/server.js'\nimport client from '../generate/client.js'\n\nconst { Command } = pkg\nconst npmjson = fs.readFileSync('./package.json', 'utf8')\n\nexport const generate = async (parts: 'all' | 'client'|'server', schema:object, tokenPath?:string) => {\n  const out = await transform(schema)\n  if (out.type === 'error') {\n    console.error(JSON.stringify(out, null, 2))\n    throw out.errors\n  }\n\n  return {\n    server: parts === 'all' || parts === 'server' ? server(out.results) : undefined,\n    client: parts === 'all' || parts === 'client' ? client(out.results, tokenPath) : undefined\n  }\n}\nconst loadFile = async (input:string) => {\n  const realPath = await fs.promises.realpath(input)\n  const basename = path.parse(realPath).name\n  return { filename: basename, data: JSON.parse(await fs.promises.readFile(realPath, 'utf8')) }\n}\n\nexport const writeFile = async (input: {\n  server: string | undefined;\n  client: string | undefined;\n}, outputFilename: string, outputDir: string) => {\n  if (!fs.existsSync(outputDir)) {\n    await fs.promises.mkdir(outputDir)\n  }\n  const outPath = await fs.promises.realpath(outputDir)\n\n  if (!(await fs.promises.stat(outputDir)).isDirectory()) {\n    throw new Error(`output_dir: \"${outputDir}\" must be a directory`)\n  }\n\n  if (input.server) {\n    const serverOutPath = path.join(outPath, `${outputFilename}-server.ts`)\n    await fs.promises.writeFile(serverOutPath, input.server, { encoding: 'utf8' })\n  }\n\n  if (input.client) {\n    const clientOutPath = path.join(outPath, `${outputFilename}-client.ts`)\n    await fs.promises.writeFile(clientOutPath, input.client, { encoding: 'utf8' })\n  }\n}\nexport const cliProgram = async (input:string, output:string, parts: 'all'| 'client'|'server' = 'all', tokenPath?: string) => {\n  const loadFiles = await loadFile(input)\n  const out = await generate(parts, loadFiles.data, tokenPath)\n\n  await (writeFile(out, loadFiles.filename, output))\n}\n\nconst program = new Command()\nprogram.version(JSON.parse(npmjson).version)\nprogram.option('-p, --parts <all|server|client>', 'Select which parts to generate: all, server or client', 'all')\nprogram.arguments('<input_file> <output_dir> [get_token_path]')\nprogram.action((inputFileArg, outputDirArg, getTokenPathArg) => {\n  if (!(program.parts || '').match(/(all|server|client)/gm)) {\n    throw new Error('parts options must be either all or server or client')\n  }\n  cliProgram(inputFileArg, outputDirArg, program.parts, getTokenPathArg || undefined)\n    .then(() => process.exit(0))\n    .catch((e) => console.error(e.message, e.stack, e))\n})\n\nprogram.parse(process.argv)\n"]}